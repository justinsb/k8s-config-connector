// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/devtools/containeranalysis/v1/containeranalysis.proto

package containeranalysispb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectsServerClient is the client API for ProjectsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsServerClient interface {
}

type projectsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsServerClient(cc grpc.ClientConnInterface) ProjectsServerClient {
	return &projectsServerClient{cc}
}

// ProjectsServerServer is the server API for ProjectsServer service.
// All implementations must embed UnimplementedProjectsServerServer
// for forward compatibility
type ProjectsServerServer interface {
	mustEmbedUnimplementedProjectsServerServer()
}

// UnimplementedProjectsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsServerServer struct {
}

func (UnimplementedProjectsServerServer) mustEmbedUnimplementedProjectsServerServer() {}

// UnsafeProjectsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsServerServer will
// result in compilation errors.
type UnsafeProjectsServerServer interface {
	mustEmbedUnimplementedProjectsServerServer()
}

func RegisterProjectsServerServer(s grpc.ServiceRegistrar, srv ProjectsServerServer) {
	s.RegisterService(&ProjectsServer_ServiceDesc, srv)
}

// ProjectsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.containeranalysis.v1.ProjectsServer",
	HandlerType: (*ProjectsServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mockgcp/devtools/containeranalysis/v1/containeranalysis.proto",
}

// ProjectsLocationsServerClient is the client API for ProjectsLocationsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsServerClient interface {
}

type projectsLocationsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsServerClient {
	return &projectsLocationsServerClient{cc}
}

// ProjectsLocationsServerServer is the server API for ProjectsLocationsServer service.
// All implementations must embed UnimplementedProjectsLocationsServerServer
// for forward compatibility
type ProjectsLocationsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsServerServer()
}

// UnimplementedProjectsLocationsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsServerServer struct {
}

func (UnimplementedProjectsLocationsServerServer) mustEmbedUnimplementedProjectsLocationsServerServer() {
}

// UnsafeProjectsLocationsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsServerServer()
}

func RegisterProjectsLocationsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsServerServer) {
	s.RegisterService(&ProjectsLocationsServer_ServiceDesc, srv)
}

// ProjectsLocationsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.containeranalysis.v1.ProjectsLocationsServer",
	HandlerType: (*ProjectsLocationsServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mockgcp/devtools/containeranalysis/v1/containeranalysis.proto",
}

// ProjectsLocationsNotesServerClient is the client API for ProjectsLocationsNotesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsNotesServerClient interface {
	GetProjectsLocationsNote(ctx context.Context, in *GetProjectsLocationsNoteRequest, opts ...grpc.CallOption) (*Note, error)
	ListProjectsLocationsNotes(ctx context.Context, in *ListProjectsLocationsNotesRequest, opts ...grpc.CallOption) (*ListNotesResponse, error)
}

type projectsLocationsNotesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsNotesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsNotesServerClient {
	return &projectsLocationsNotesServerClient{cc}
}

func (c *projectsLocationsNotesServerClient) GetProjectsLocationsNote(ctx context.Context, in *GetProjectsLocationsNoteRequest, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsLocationsNotesServer/GetProjectsLocationsNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsNotesServerClient) ListProjectsLocationsNotes(ctx context.Context, in *ListProjectsLocationsNotesRequest, opts ...grpc.CallOption) (*ListNotesResponse, error) {
	out := new(ListNotesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsLocationsNotesServer/ListProjectsLocationsNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsNotesServerServer is the server API for ProjectsLocationsNotesServer service.
// All implementations must embed UnimplementedProjectsLocationsNotesServerServer
// for forward compatibility
type ProjectsLocationsNotesServerServer interface {
	GetProjectsLocationsNote(context.Context, *GetProjectsLocationsNoteRequest) (*Note, error)
	ListProjectsLocationsNotes(context.Context, *ListProjectsLocationsNotesRequest) (*ListNotesResponse, error)
	mustEmbedUnimplementedProjectsLocationsNotesServerServer()
}

// UnimplementedProjectsLocationsNotesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsNotesServerServer struct {
}

func (UnimplementedProjectsLocationsNotesServerServer) GetProjectsLocationsNote(context.Context, *GetProjectsLocationsNoteRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsNote not implemented")
}
func (UnimplementedProjectsLocationsNotesServerServer) ListProjectsLocationsNotes(context.Context, *ListProjectsLocationsNotesRequest) (*ListNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsNotes not implemented")
}
func (UnimplementedProjectsLocationsNotesServerServer) mustEmbedUnimplementedProjectsLocationsNotesServerServer() {
}

// UnsafeProjectsLocationsNotesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsNotesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsNotesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsNotesServerServer()
}

func RegisterProjectsLocationsNotesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsNotesServerServer) {
	s.RegisterService(&ProjectsLocationsNotesServer_ServiceDesc, srv)
}

func _ProjectsLocationsNotesServer_GetProjectsLocationsNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsNotesServerServer).GetProjectsLocationsNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsLocationsNotesServer/GetProjectsLocationsNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsNotesServerServer).GetProjectsLocationsNote(ctx, req.(*GetProjectsLocationsNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsNotesServer_ListProjectsLocationsNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsNotesServerServer).ListProjectsLocationsNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsLocationsNotesServer/ListProjectsLocationsNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsNotesServerServer).ListProjectsLocationsNotes(ctx, req.(*ListProjectsLocationsNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsNotesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsNotesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsNotesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.containeranalysis.v1.ProjectsLocationsNotesServer",
	HandlerType: (*ProjectsLocationsNotesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectsLocationsNote",
			Handler:    _ProjectsLocationsNotesServer_GetProjectsLocationsNote_Handler,
		},
		{
			MethodName: "ListProjectsLocationsNotes",
			Handler:    _ProjectsLocationsNotesServer_ListProjectsLocationsNotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/devtools/containeranalysis/v1/containeranalysis.proto",
}

// ProjectsLocationsNotesOccurrencesServerClient is the client API for ProjectsLocationsNotesOccurrencesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsNotesOccurrencesServerClient interface {
	ListProjectsLocationsNotesOccurrences(ctx context.Context, in *ListProjectsLocationsNotesOccurrencesRequest, opts ...grpc.CallOption) (*ListNoteOccurrencesResponse, error)
}

type projectsLocationsNotesOccurrencesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsNotesOccurrencesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsNotesOccurrencesServerClient {
	return &projectsLocationsNotesOccurrencesServerClient{cc}
}

func (c *projectsLocationsNotesOccurrencesServerClient) ListProjectsLocationsNotesOccurrences(ctx context.Context, in *ListProjectsLocationsNotesOccurrencesRequest, opts ...grpc.CallOption) (*ListNoteOccurrencesResponse, error) {
	out := new(ListNoteOccurrencesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsLocationsNotesOccurrencesServer/ListProjectsLocationsNotesOccurrences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsNotesOccurrencesServerServer is the server API for ProjectsLocationsNotesOccurrencesServer service.
// All implementations must embed UnimplementedProjectsLocationsNotesOccurrencesServerServer
// for forward compatibility
type ProjectsLocationsNotesOccurrencesServerServer interface {
	ListProjectsLocationsNotesOccurrences(context.Context, *ListProjectsLocationsNotesOccurrencesRequest) (*ListNoteOccurrencesResponse, error)
	mustEmbedUnimplementedProjectsLocationsNotesOccurrencesServerServer()
}

// UnimplementedProjectsLocationsNotesOccurrencesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsNotesOccurrencesServerServer struct {
}

func (UnimplementedProjectsLocationsNotesOccurrencesServerServer) ListProjectsLocationsNotesOccurrences(context.Context, *ListProjectsLocationsNotesOccurrencesRequest) (*ListNoteOccurrencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsNotesOccurrences not implemented")
}
func (UnimplementedProjectsLocationsNotesOccurrencesServerServer) mustEmbedUnimplementedProjectsLocationsNotesOccurrencesServerServer() {
}

// UnsafeProjectsLocationsNotesOccurrencesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsNotesOccurrencesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsNotesOccurrencesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsNotesOccurrencesServerServer()
}

func RegisterProjectsLocationsNotesOccurrencesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsNotesOccurrencesServerServer) {
	s.RegisterService(&ProjectsLocationsNotesOccurrencesServer_ServiceDesc, srv)
}

func _ProjectsLocationsNotesOccurrencesServer_ListProjectsLocationsNotesOccurrences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsNotesOccurrencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsNotesOccurrencesServerServer).ListProjectsLocationsNotesOccurrences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsLocationsNotesOccurrencesServer/ListProjectsLocationsNotesOccurrences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsNotesOccurrencesServerServer).ListProjectsLocationsNotesOccurrences(ctx, req.(*ListProjectsLocationsNotesOccurrencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsNotesOccurrencesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsNotesOccurrencesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsNotesOccurrencesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.containeranalysis.v1.ProjectsLocationsNotesOccurrencesServer",
	HandlerType: (*ProjectsLocationsNotesOccurrencesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProjectsLocationsNotesOccurrences",
			Handler:    _ProjectsLocationsNotesOccurrencesServer_ListProjectsLocationsNotesOccurrences_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/devtools/containeranalysis/v1/containeranalysis.proto",
}

// ProjectsLocationsOccurrencesServerClient is the client API for ProjectsLocationsOccurrencesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsOccurrencesServerClient interface {
	GetProjectsLocationsOccurrence(ctx context.Context, in *GetProjectsLocationsOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error)
	GetNotesProjectsLocationsOccurrence(ctx context.Context, in *GetNotesProjectsLocationsOccurrenceRequest, opts ...grpc.CallOption) (*Note, error)
	GetVulnerabilitySummaryProjectsLocationsOccurrence(ctx context.Context, in *GetVulnerabilitySummaryProjectsLocationsOccurrenceRequest, opts ...grpc.CallOption) (*VulnerabilityOccurrencesSummary, error)
	ListProjectsLocationsOccurrences(ctx context.Context, in *ListProjectsLocationsOccurrencesRequest, opts ...grpc.CallOption) (*ListOccurrencesResponse, error)
}

type projectsLocationsOccurrencesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsOccurrencesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsOccurrencesServerClient {
	return &projectsLocationsOccurrencesServerClient{cc}
}

func (c *projectsLocationsOccurrencesServerClient) GetProjectsLocationsOccurrence(ctx context.Context, in *GetProjectsLocationsOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error) {
	out := new(Occurrence)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsLocationsOccurrencesServer/GetProjectsLocationsOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsOccurrencesServerClient) GetNotesProjectsLocationsOccurrence(ctx context.Context, in *GetNotesProjectsLocationsOccurrenceRequest, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsLocationsOccurrencesServer/GetNotesProjectsLocationsOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsOccurrencesServerClient) GetVulnerabilitySummaryProjectsLocationsOccurrence(ctx context.Context, in *GetVulnerabilitySummaryProjectsLocationsOccurrenceRequest, opts ...grpc.CallOption) (*VulnerabilityOccurrencesSummary, error) {
	out := new(VulnerabilityOccurrencesSummary)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsLocationsOccurrencesServer/GetVulnerabilitySummaryProjectsLocationsOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsOccurrencesServerClient) ListProjectsLocationsOccurrences(ctx context.Context, in *ListProjectsLocationsOccurrencesRequest, opts ...grpc.CallOption) (*ListOccurrencesResponse, error) {
	out := new(ListOccurrencesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsLocationsOccurrencesServer/ListProjectsLocationsOccurrences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsOccurrencesServerServer is the server API for ProjectsLocationsOccurrencesServer service.
// All implementations must embed UnimplementedProjectsLocationsOccurrencesServerServer
// for forward compatibility
type ProjectsLocationsOccurrencesServerServer interface {
	GetProjectsLocationsOccurrence(context.Context, *GetProjectsLocationsOccurrenceRequest) (*Occurrence, error)
	GetNotesProjectsLocationsOccurrence(context.Context, *GetNotesProjectsLocationsOccurrenceRequest) (*Note, error)
	GetVulnerabilitySummaryProjectsLocationsOccurrence(context.Context, *GetVulnerabilitySummaryProjectsLocationsOccurrenceRequest) (*VulnerabilityOccurrencesSummary, error)
	ListProjectsLocationsOccurrences(context.Context, *ListProjectsLocationsOccurrencesRequest) (*ListOccurrencesResponse, error)
	mustEmbedUnimplementedProjectsLocationsOccurrencesServerServer()
}

// UnimplementedProjectsLocationsOccurrencesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsOccurrencesServerServer struct {
}

func (UnimplementedProjectsLocationsOccurrencesServerServer) GetProjectsLocationsOccurrence(context.Context, *GetProjectsLocationsOccurrenceRequest) (*Occurrence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsOccurrence not implemented")
}
func (UnimplementedProjectsLocationsOccurrencesServerServer) GetNotesProjectsLocationsOccurrence(context.Context, *GetNotesProjectsLocationsOccurrenceRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotesProjectsLocationsOccurrence not implemented")
}
func (UnimplementedProjectsLocationsOccurrencesServerServer) GetVulnerabilitySummaryProjectsLocationsOccurrence(context.Context, *GetVulnerabilitySummaryProjectsLocationsOccurrenceRequest) (*VulnerabilityOccurrencesSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVulnerabilitySummaryProjectsLocationsOccurrence not implemented")
}
func (UnimplementedProjectsLocationsOccurrencesServerServer) ListProjectsLocationsOccurrences(context.Context, *ListProjectsLocationsOccurrencesRequest) (*ListOccurrencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsOccurrences not implemented")
}
func (UnimplementedProjectsLocationsOccurrencesServerServer) mustEmbedUnimplementedProjectsLocationsOccurrencesServerServer() {
}

// UnsafeProjectsLocationsOccurrencesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsOccurrencesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsOccurrencesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsOccurrencesServerServer()
}

func RegisterProjectsLocationsOccurrencesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsOccurrencesServerServer) {
	s.RegisterService(&ProjectsLocationsOccurrencesServer_ServiceDesc, srv)
}

func _ProjectsLocationsOccurrencesServer_GetProjectsLocationsOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsOccurrencesServerServer).GetProjectsLocationsOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsLocationsOccurrencesServer/GetProjectsLocationsOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsOccurrencesServerServer).GetProjectsLocationsOccurrence(ctx, req.(*GetProjectsLocationsOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsOccurrencesServer_GetNotesProjectsLocationsOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotesProjectsLocationsOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsOccurrencesServerServer).GetNotesProjectsLocationsOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsLocationsOccurrencesServer/GetNotesProjectsLocationsOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsOccurrencesServerServer).GetNotesProjectsLocationsOccurrence(ctx, req.(*GetNotesProjectsLocationsOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsOccurrencesServer_GetVulnerabilitySummaryProjectsLocationsOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVulnerabilitySummaryProjectsLocationsOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsOccurrencesServerServer).GetVulnerabilitySummaryProjectsLocationsOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsLocationsOccurrencesServer/GetVulnerabilitySummaryProjectsLocationsOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsOccurrencesServerServer).GetVulnerabilitySummaryProjectsLocationsOccurrence(ctx, req.(*GetVulnerabilitySummaryProjectsLocationsOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsOccurrencesServer_ListProjectsLocationsOccurrences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsOccurrencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsOccurrencesServerServer).ListProjectsLocationsOccurrences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsLocationsOccurrencesServer/ListProjectsLocationsOccurrences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsOccurrencesServerServer).ListProjectsLocationsOccurrences(ctx, req.(*ListProjectsLocationsOccurrencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsOccurrencesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsOccurrencesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsOccurrencesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.containeranalysis.v1.ProjectsLocationsOccurrencesServer",
	HandlerType: (*ProjectsLocationsOccurrencesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectsLocationsOccurrence",
			Handler:    _ProjectsLocationsOccurrencesServer_GetProjectsLocationsOccurrence_Handler,
		},
		{
			MethodName: "GetNotesProjectsLocationsOccurrence",
			Handler:    _ProjectsLocationsOccurrencesServer_GetNotesProjectsLocationsOccurrence_Handler,
		},
		{
			MethodName: "GetVulnerabilitySummaryProjectsLocationsOccurrence",
			Handler:    _ProjectsLocationsOccurrencesServer_GetVulnerabilitySummaryProjectsLocationsOccurrence_Handler,
		},
		{
			MethodName: "ListProjectsLocationsOccurrences",
			Handler:    _ProjectsLocationsOccurrencesServer_ListProjectsLocationsOccurrences_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/devtools/containeranalysis/v1/containeranalysis.proto",
}

// ProjectsLocationsResourcesServerClient is the client API for ProjectsLocationsResourcesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsResourcesServerClient interface {
	ExportSBOMProjectsLocationsResource(ctx context.Context, in *ExportSBOMProjectsLocationsResourceRequest, opts ...grpc.CallOption) (*ExportSBOMResponse, error)
}

type projectsLocationsResourcesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsResourcesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsResourcesServerClient {
	return &projectsLocationsResourcesServerClient{cc}
}

func (c *projectsLocationsResourcesServerClient) ExportSBOMProjectsLocationsResource(ctx context.Context, in *ExportSBOMProjectsLocationsResourceRequest, opts ...grpc.CallOption) (*ExportSBOMResponse, error) {
	out := new(ExportSBOMResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsLocationsResourcesServer/ExportSBOMProjectsLocationsResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsResourcesServerServer is the server API for ProjectsLocationsResourcesServer service.
// All implementations must embed UnimplementedProjectsLocationsResourcesServerServer
// for forward compatibility
type ProjectsLocationsResourcesServerServer interface {
	ExportSBOMProjectsLocationsResource(context.Context, *ExportSBOMProjectsLocationsResourceRequest) (*ExportSBOMResponse, error)
	mustEmbedUnimplementedProjectsLocationsResourcesServerServer()
}

// UnimplementedProjectsLocationsResourcesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsResourcesServerServer struct {
}

func (UnimplementedProjectsLocationsResourcesServerServer) ExportSBOMProjectsLocationsResource(context.Context, *ExportSBOMProjectsLocationsResourceRequest) (*ExportSBOMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSBOMProjectsLocationsResource not implemented")
}
func (UnimplementedProjectsLocationsResourcesServerServer) mustEmbedUnimplementedProjectsLocationsResourcesServerServer() {
}

// UnsafeProjectsLocationsResourcesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsResourcesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsResourcesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsResourcesServerServer()
}

func RegisterProjectsLocationsResourcesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsResourcesServerServer) {
	s.RegisterService(&ProjectsLocationsResourcesServer_ServiceDesc, srv)
}

func _ProjectsLocationsResourcesServer_ExportSBOMProjectsLocationsResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportSBOMProjectsLocationsResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsResourcesServerServer).ExportSBOMProjectsLocationsResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsLocationsResourcesServer/ExportSBOMProjectsLocationsResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsResourcesServerServer).ExportSBOMProjectsLocationsResource(ctx, req.(*ExportSBOMProjectsLocationsResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsResourcesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsResourcesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsResourcesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.containeranalysis.v1.ProjectsLocationsResourcesServer",
	HandlerType: (*ProjectsLocationsResourcesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExportSBOMProjectsLocationsResource",
			Handler:    _ProjectsLocationsResourcesServer_ExportSBOMProjectsLocationsResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/devtools/containeranalysis/v1/containeranalysis.proto",
}

// ProjectsNotesServerClient is the client API for ProjectsNotesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsNotesServerClient interface {
	BatchCreateProjectsNote(ctx context.Context, in *BatchCreateProjectsNoteRequest, opts ...grpc.CallOption) (*BatchCreateNotesResponse, error)
	CreateProjectsNote(ctx context.Context, in *CreateProjectsNoteRequest, opts ...grpc.CallOption) (*Note, error)
	DeleteProjectsNote(ctx context.Context, in *DeleteProjectsNoteRequest, opts ...grpc.CallOption) (*Empty, error)
	GetProjectsNote(ctx context.Context, in *GetProjectsNoteRequest, opts ...grpc.CallOption) (*Note, error)
	ListProjectsNotes(ctx context.Context, in *ListProjectsNotesRequest, opts ...grpc.CallOption) (*ListNotesResponse, error)
	PatchProjectsNote(ctx context.Context, in *PatchProjectsNoteRequest, opts ...grpc.CallOption) (*Note, error)
}

type projectsNotesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsNotesServerClient(cc grpc.ClientConnInterface) ProjectsNotesServerClient {
	return &projectsNotesServerClient{cc}
}

func (c *projectsNotesServerClient) BatchCreateProjectsNote(ctx context.Context, in *BatchCreateProjectsNoteRequest, opts ...grpc.CallOption) (*BatchCreateNotesResponse, error) {
	out := new(BatchCreateNotesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsNotesServer/BatchCreateProjectsNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsNotesServerClient) CreateProjectsNote(ctx context.Context, in *CreateProjectsNoteRequest, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsNotesServer/CreateProjectsNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsNotesServerClient) DeleteProjectsNote(ctx context.Context, in *DeleteProjectsNoteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsNotesServer/DeleteProjectsNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsNotesServerClient) GetProjectsNote(ctx context.Context, in *GetProjectsNoteRequest, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsNotesServer/GetProjectsNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsNotesServerClient) ListProjectsNotes(ctx context.Context, in *ListProjectsNotesRequest, opts ...grpc.CallOption) (*ListNotesResponse, error) {
	out := new(ListNotesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsNotesServer/ListProjectsNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsNotesServerClient) PatchProjectsNote(ctx context.Context, in *PatchProjectsNoteRequest, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsNotesServer/PatchProjectsNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsNotesServerServer is the server API for ProjectsNotesServer service.
// All implementations must embed UnimplementedProjectsNotesServerServer
// for forward compatibility
type ProjectsNotesServerServer interface {
	BatchCreateProjectsNote(context.Context, *BatchCreateProjectsNoteRequest) (*BatchCreateNotesResponse, error)
	CreateProjectsNote(context.Context, *CreateProjectsNoteRequest) (*Note, error)
	DeleteProjectsNote(context.Context, *DeleteProjectsNoteRequest) (*Empty, error)
	GetProjectsNote(context.Context, *GetProjectsNoteRequest) (*Note, error)
	ListProjectsNotes(context.Context, *ListProjectsNotesRequest) (*ListNotesResponse, error)
	PatchProjectsNote(context.Context, *PatchProjectsNoteRequest) (*Note, error)
	mustEmbedUnimplementedProjectsNotesServerServer()
}

// UnimplementedProjectsNotesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsNotesServerServer struct {
}

func (UnimplementedProjectsNotesServerServer) BatchCreateProjectsNote(context.Context, *BatchCreateProjectsNoteRequest) (*BatchCreateNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateProjectsNote not implemented")
}
func (UnimplementedProjectsNotesServerServer) CreateProjectsNote(context.Context, *CreateProjectsNoteRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsNote not implemented")
}
func (UnimplementedProjectsNotesServerServer) DeleteProjectsNote(context.Context, *DeleteProjectsNoteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsNote not implemented")
}
func (UnimplementedProjectsNotesServerServer) GetProjectsNote(context.Context, *GetProjectsNoteRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsNote not implemented")
}
func (UnimplementedProjectsNotesServerServer) ListProjectsNotes(context.Context, *ListProjectsNotesRequest) (*ListNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsNotes not implemented")
}
func (UnimplementedProjectsNotesServerServer) PatchProjectsNote(context.Context, *PatchProjectsNoteRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsNote not implemented")
}
func (UnimplementedProjectsNotesServerServer) mustEmbedUnimplementedProjectsNotesServerServer() {}

// UnsafeProjectsNotesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsNotesServerServer will
// result in compilation errors.
type UnsafeProjectsNotesServerServer interface {
	mustEmbedUnimplementedProjectsNotesServerServer()
}

func RegisterProjectsNotesServerServer(s grpc.ServiceRegistrar, srv ProjectsNotesServerServer) {
	s.RegisterService(&ProjectsNotesServer_ServiceDesc, srv)
}

func _ProjectsNotesServer_BatchCreateProjectsNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateProjectsNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsNotesServerServer).BatchCreateProjectsNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsNotesServer/BatchCreateProjectsNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsNotesServerServer).BatchCreateProjectsNote(ctx, req.(*BatchCreateProjectsNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsNotesServer_CreateProjectsNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsNotesServerServer).CreateProjectsNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsNotesServer/CreateProjectsNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsNotesServerServer).CreateProjectsNote(ctx, req.(*CreateProjectsNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsNotesServer_DeleteProjectsNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsNotesServerServer).DeleteProjectsNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsNotesServer/DeleteProjectsNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsNotesServerServer).DeleteProjectsNote(ctx, req.(*DeleteProjectsNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsNotesServer_GetProjectsNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsNotesServerServer).GetProjectsNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsNotesServer/GetProjectsNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsNotesServerServer).GetProjectsNote(ctx, req.(*GetProjectsNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsNotesServer_ListProjectsNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsNotesServerServer).ListProjectsNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsNotesServer/ListProjectsNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsNotesServerServer).ListProjectsNotes(ctx, req.(*ListProjectsNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsNotesServer_PatchProjectsNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsNotesServerServer).PatchProjectsNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsNotesServer/PatchProjectsNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsNotesServerServer).PatchProjectsNote(ctx, req.(*PatchProjectsNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsNotesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsNotesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsNotesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.containeranalysis.v1.ProjectsNotesServer",
	HandlerType: (*ProjectsNotesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchCreateProjectsNote",
			Handler:    _ProjectsNotesServer_BatchCreateProjectsNote_Handler,
		},
		{
			MethodName: "CreateProjectsNote",
			Handler:    _ProjectsNotesServer_CreateProjectsNote_Handler,
		},
		{
			MethodName: "DeleteProjectsNote",
			Handler:    _ProjectsNotesServer_DeleteProjectsNote_Handler,
		},
		{
			MethodName: "GetProjectsNote",
			Handler:    _ProjectsNotesServer_GetProjectsNote_Handler,
		},
		{
			MethodName: "ListProjectsNotes",
			Handler:    _ProjectsNotesServer_ListProjectsNotes_Handler,
		},
		{
			MethodName: "PatchProjectsNote",
			Handler:    _ProjectsNotesServer_PatchProjectsNote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/devtools/containeranalysis/v1/containeranalysis.proto",
}

// ProjectsNotesOccurrencesServerClient is the client API for ProjectsNotesOccurrencesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsNotesOccurrencesServerClient interface {
	ListProjectsNotesOccurrences(ctx context.Context, in *ListProjectsNotesOccurrencesRequest, opts ...grpc.CallOption) (*ListNoteOccurrencesResponse, error)
}

type projectsNotesOccurrencesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsNotesOccurrencesServerClient(cc grpc.ClientConnInterface) ProjectsNotesOccurrencesServerClient {
	return &projectsNotesOccurrencesServerClient{cc}
}

func (c *projectsNotesOccurrencesServerClient) ListProjectsNotesOccurrences(ctx context.Context, in *ListProjectsNotesOccurrencesRequest, opts ...grpc.CallOption) (*ListNoteOccurrencesResponse, error) {
	out := new(ListNoteOccurrencesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsNotesOccurrencesServer/ListProjectsNotesOccurrences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsNotesOccurrencesServerServer is the server API for ProjectsNotesOccurrencesServer service.
// All implementations must embed UnimplementedProjectsNotesOccurrencesServerServer
// for forward compatibility
type ProjectsNotesOccurrencesServerServer interface {
	ListProjectsNotesOccurrences(context.Context, *ListProjectsNotesOccurrencesRequest) (*ListNoteOccurrencesResponse, error)
	mustEmbedUnimplementedProjectsNotesOccurrencesServerServer()
}

// UnimplementedProjectsNotesOccurrencesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsNotesOccurrencesServerServer struct {
}

func (UnimplementedProjectsNotesOccurrencesServerServer) ListProjectsNotesOccurrences(context.Context, *ListProjectsNotesOccurrencesRequest) (*ListNoteOccurrencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsNotesOccurrences not implemented")
}
func (UnimplementedProjectsNotesOccurrencesServerServer) mustEmbedUnimplementedProjectsNotesOccurrencesServerServer() {
}

// UnsafeProjectsNotesOccurrencesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsNotesOccurrencesServerServer will
// result in compilation errors.
type UnsafeProjectsNotesOccurrencesServerServer interface {
	mustEmbedUnimplementedProjectsNotesOccurrencesServerServer()
}

func RegisterProjectsNotesOccurrencesServerServer(s grpc.ServiceRegistrar, srv ProjectsNotesOccurrencesServerServer) {
	s.RegisterService(&ProjectsNotesOccurrencesServer_ServiceDesc, srv)
}

func _ProjectsNotesOccurrencesServer_ListProjectsNotesOccurrences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsNotesOccurrencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsNotesOccurrencesServerServer).ListProjectsNotesOccurrences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsNotesOccurrencesServer/ListProjectsNotesOccurrences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsNotesOccurrencesServerServer).ListProjectsNotesOccurrences(ctx, req.(*ListProjectsNotesOccurrencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsNotesOccurrencesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsNotesOccurrencesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsNotesOccurrencesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.containeranalysis.v1.ProjectsNotesOccurrencesServer",
	HandlerType: (*ProjectsNotesOccurrencesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProjectsNotesOccurrences",
			Handler:    _ProjectsNotesOccurrencesServer_ListProjectsNotesOccurrences_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/devtools/containeranalysis/v1/containeranalysis.proto",
}

// ProjectsOccurrencesServerClient is the client API for ProjectsOccurrencesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsOccurrencesServerClient interface {
	BatchCreateProjectsOccurrence(ctx context.Context, in *BatchCreateProjectsOccurrenceRequest, opts ...grpc.CallOption) (*BatchCreateOccurrencesResponse, error)
	CreateProjectsOccurrence(ctx context.Context, in *CreateProjectsOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error)
	DeleteProjectsOccurrence(ctx context.Context, in *DeleteProjectsOccurrenceRequest, opts ...grpc.CallOption) (*Empty, error)
	GetProjectsOccurrence(ctx context.Context, in *GetProjectsOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error)
	GetNotesProjectsOccurrence(ctx context.Context, in *GetNotesProjectsOccurrenceRequest, opts ...grpc.CallOption) (*Note, error)
	GetVulnerabilitySummaryProjectsOccurrence(ctx context.Context, in *GetVulnerabilitySummaryProjectsOccurrenceRequest, opts ...grpc.CallOption) (*VulnerabilityOccurrencesSummary, error)
	ListProjectsOccurrences(ctx context.Context, in *ListProjectsOccurrencesRequest, opts ...grpc.CallOption) (*ListOccurrencesResponse, error)
	PatchProjectsOccurrence(ctx context.Context, in *PatchProjectsOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error)
}

type projectsOccurrencesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsOccurrencesServerClient(cc grpc.ClientConnInterface) ProjectsOccurrencesServerClient {
	return &projectsOccurrencesServerClient{cc}
}

func (c *projectsOccurrencesServerClient) BatchCreateProjectsOccurrence(ctx context.Context, in *BatchCreateProjectsOccurrenceRequest, opts ...grpc.CallOption) (*BatchCreateOccurrencesResponse, error) {
	out := new(BatchCreateOccurrencesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsOccurrencesServer/BatchCreateProjectsOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsOccurrencesServerClient) CreateProjectsOccurrence(ctx context.Context, in *CreateProjectsOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error) {
	out := new(Occurrence)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsOccurrencesServer/CreateProjectsOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsOccurrencesServerClient) DeleteProjectsOccurrence(ctx context.Context, in *DeleteProjectsOccurrenceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsOccurrencesServer/DeleteProjectsOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsOccurrencesServerClient) GetProjectsOccurrence(ctx context.Context, in *GetProjectsOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error) {
	out := new(Occurrence)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsOccurrencesServer/GetProjectsOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsOccurrencesServerClient) GetNotesProjectsOccurrence(ctx context.Context, in *GetNotesProjectsOccurrenceRequest, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsOccurrencesServer/GetNotesProjectsOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsOccurrencesServerClient) GetVulnerabilitySummaryProjectsOccurrence(ctx context.Context, in *GetVulnerabilitySummaryProjectsOccurrenceRequest, opts ...grpc.CallOption) (*VulnerabilityOccurrencesSummary, error) {
	out := new(VulnerabilityOccurrencesSummary)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsOccurrencesServer/GetVulnerabilitySummaryProjectsOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsOccurrencesServerClient) ListProjectsOccurrences(ctx context.Context, in *ListProjectsOccurrencesRequest, opts ...grpc.CallOption) (*ListOccurrencesResponse, error) {
	out := new(ListOccurrencesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsOccurrencesServer/ListProjectsOccurrences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsOccurrencesServerClient) PatchProjectsOccurrence(ctx context.Context, in *PatchProjectsOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error) {
	out := new(Occurrence)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsOccurrencesServer/PatchProjectsOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsOccurrencesServerServer is the server API for ProjectsOccurrencesServer service.
// All implementations must embed UnimplementedProjectsOccurrencesServerServer
// for forward compatibility
type ProjectsOccurrencesServerServer interface {
	BatchCreateProjectsOccurrence(context.Context, *BatchCreateProjectsOccurrenceRequest) (*BatchCreateOccurrencesResponse, error)
	CreateProjectsOccurrence(context.Context, *CreateProjectsOccurrenceRequest) (*Occurrence, error)
	DeleteProjectsOccurrence(context.Context, *DeleteProjectsOccurrenceRequest) (*Empty, error)
	GetProjectsOccurrence(context.Context, *GetProjectsOccurrenceRequest) (*Occurrence, error)
	GetNotesProjectsOccurrence(context.Context, *GetNotesProjectsOccurrenceRequest) (*Note, error)
	GetVulnerabilitySummaryProjectsOccurrence(context.Context, *GetVulnerabilitySummaryProjectsOccurrenceRequest) (*VulnerabilityOccurrencesSummary, error)
	ListProjectsOccurrences(context.Context, *ListProjectsOccurrencesRequest) (*ListOccurrencesResponse, error)
	PatchProjectsOccurrence(context.Context, *PatchProjectsOccurrenceRequest) (*Occurrence, error)
	mustEmbedUnimplementedProjectsOccurrencesServerServer()
}

// UnimplementedProjectsOccurrencesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsOccurrencesServerServer struct {
}

func (UnimplementedProjectsOccurrencesServerServer) BatchCreateProjectsOccurrence(context.Context, *BatchCreateProjectsOccurrenceRequest) (*BatchCreateOccurrencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateProjectsOccurrence not implemented")
}
func (UnimplementedProjectsOccurrencesServerServer) CreateProjectsOccurrence(context.Context, *CreateProjectsOccurrenceRequest) (*Occurrence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsOccurrence not implemented")
}
func (UnimplementedProjectsOccurrencesServerServer) DeleteProjectsOccurrence(context.Context, *DeleteProjectsOccurrenceRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsOccurrence not implemented")
}
func (UnimplementedProjectsOccurrencesServerServer) GetProjectsOccurrence(context.Context, *GetProjectsOccurrenceRequest) (*Occurrence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsOccurrence not implemented")
}
func (UnimplementedProjectsOccurrencesServerServer) GetNotesProjectsOccurrence(context.Context, *GetNotesProjectsOccurrenceRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotesProjectsOccurrence not implemented")
}
func (UnimplementedProjectsOccurrencesServerServer) GetVulnerabilitySummaryProjectsOccurrence(context.Context, *GetVulnerabilitySummaryProjectsOccurrenceRequest) (*VulnerabilityOccurrencesSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVulnerabilitySummaryProjectsOccurrence not implemented")
}
func (UnimplementedProjectsOccurrencesServerServer) ListProjectsOccurrences(context.Context, *ListProjectsOccurrencesRequest) (*ListOccurrencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsOccurrences not implemented")
}
func (UnimplementedProjectsOccurrencesServerServer) PatchProjectsOccurrence(context.Context, *PatchProjectsOccurrenceRequest) (*Occurrence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsOccurrence not implemented")
}
func (UnimplementedProjectsOccurrencesServerServer) mustEmbedUnimplementedProjectsOccurrencesServerServer() {
}

// UnsafeProjectsOccurrencesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsOccurrencesServerServer will
// result in compilation errors.
type UnsafeProjectsOccurrencesServerServer interface {
	mustEmbedUnimplementedProjectsOccurrencesServerServer()
}

func RegisterProjectsOccurrencesServerServer(s grpc.ServiceRegistrar, srv ProjectsOccurrencesServerServer) {
	s.RegisterService(&ProjectsOccurrencesServer_ServiceDesc, srv)
}

func _ProjectsOccurrencesServer_BatchCreateProjectsOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateProjectsOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsOccurrencesServerServer).BatchCreateProjectsOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsOccurrencesServer/BatchCreateProjectsOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsOccurrencesServerServer).BatchCreateProjectsOccurrence(ctx, req.(*BatchCreateProjectsOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsOccurrencesServer_CreateProjectsOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsOccurrencesServerServer).CreateProjectsOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsOccurrencesServer/CreateProjectsOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsOccurrencesServerServer).CreateProjectsOccurrence(ctx, req.(*CreateProjectsOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsOccurrencesServer_DeleteProjectsOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsOccurrencesServerServer).DeleteProjectsOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsOccurrencesServer/DeleteProjectsOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsOccurrencesServerServer).DeleteProjectsOccurrence(ctx, req.(*DeleteProjectsOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsOccurrencesServer_GetProjectsOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsOccurrencesServerServer).GetProjectsOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsOccurrencesServer/GetProjectsOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsOccurrencesServerServer).GetProjectsOccurrence(ctx, req.(*GetProjectsOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsOccurrencesServer_GetNotesProjectsOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotesProjectsOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsOccurrencesServerServer).GetNotesProjectsOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsOccurrencesServer/GetNotesProjectsOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsOccurrencesServerServer).GetNotesProjectsOccurrence(ctx, req.(*GetNotesProjectsOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsOccurrencesServer_GetVulnerabilitySummaryProjectsOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVulnerabilitySummaryProjectsOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsOccurrencesServerServer).GetVulnerabilitySummaryProjectsOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsOccurrencesServer/GetVulnerabilitySummaryProjectsOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsOccurrencesServerServer).GetVulnerabilitySummaryProjectsOccurrence(ctx, req.(*GetVulnerabilitySummaryProjectsOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsOccurrencesServer_ListProjectsOccurrences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsOccurrencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsOccurrencesServerServer).ListProjectsOccurrences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsOccurrencesServer/ListProjectsOccurrences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsOccurrencesServerServer).ListProjectsOccurrences(ctx, req.(*ListProjectsOccurrencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsOccurrencesServer_PatchProjectsOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsOccurrencesServerServer).PatchProjectsOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsOccurrencesServer/PatchProjectsOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsOccurrencesServerServer).PatchProjectsOccurrence(ctx, req.(*PatchProjectsOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsOccurrencesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsOccurrencesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsOccurrencesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.containeranalysis.v1.ProjectsOccurrencesServer",
	HandlerType: (*ProjectsOccurrencesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchCreateProjectsOccurrence",
			Handler:    _ProjectsOccurrencesServer_BatchCreateProjectsOccurrence_Handler,
		},
		{
			MethodName: "CreateProjectsOccurrence",
			Handler:    _ProjectsOccurrencesServer_CreateProjectsOccurrence_Handler,
		},
		{
			MethodName: "DeleteProjectsOccurrence",
			Handler:    _ProjectsOccurrencesServer_DeleteProjectsOccurrence_Handler,
		},
		{
			MethodName: "GetProjectsOccurrence",
			Handler:    _ProjectsOccurrencesServer_GetProjectsOccurrence_Handler,
		},
		{
			MethodName: "GetNotesProjectsOccurrence",
			Handler:    _ProjectsOccurrencesServer_GetNotesProjectsOccurrence_Handler,
		},
		{
			MethodName: "GetVulnerabilitySummaryProjectsOccurrence",
			Handler:    _ProjectsOccurrencesServer_GetVulnerabilitySummaryProjectsOccurrence_Handler,
		},
		{
			MethodName: "ListProjectsOccurrences",
			Handler:    _ProjectsOccurrencesServer_ListProjectsOccurrences_Handler,
		},
		{
			MethodName: "PatchProjectsOccurrence",
			Handler:    _ProjectsOccurrencesServer_PatchProjectsOccurrence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/devtools/containeranalysis/v1/containeranalysis.proto",
}

// ProjectsResourcesServerClient is the client API for ProjectsResourcesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsResourcesServerClient interface {
	ExportSBOMProjectsResource(ctx context.Context, in *ExportSBOMProjectsResourceRequest, opts ...grpc.CallOption) (*ExportSBOMResponse, error)
}

type projectsResourcesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsResourcesServerClient(cc grpc.ClientConnInterface) ProjectsResourcesServerClient {
	return &projectsResourcesServerClient{cc}
}

func (c *projectsResourcesServerClient) ExportSBOMProjectsResource(ctx context.Context, in *ExportSBOMProjectsResourceRequest, opts ...grpc.CallOption) (*ExportSBOMResponse, error) {
	out := new(ExportSBOMResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.containeranalysis.v1.ProjectsResourcesServer/ExportSBOMProjectsResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsResourcesServerServer is the server API for ProjectsResourcesServer service.
// All implementations must embed UnimplementedProjectsResourcesServerServer
// for forward compatibility
type ProjectsResourcesServerServer interface {
	ExportSBOMProjectsResource(context.Context, *ExportSBOMProjectsResourceRequest) (*ExportSBOMResponse, error)
	mustEmbedUnimplementedProjectsResourcesServerServer()
}

// UnimplementedProjectsResourcesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsResourcesServerServer struct {
}

func (UnimplementedProjectsResourcesServerServer) ExportSBOMProjectsResource(context.Context, *ExportSBOMProjectsResourceRequest) (*ExportSBOMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSBOMProjectsResource not implemented")
}
func (UnimplementedProjectsResourcesServerServer) mustEmbedUnimplementedProjectsResourcesServerServer() {
}

// UnsafeProjectsResourcesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsResourcesServerServer will
// result in compilation errors.
type UnsafeProjectsResourcesServerServer interface {
	mustEmbedUnimplementedProjectsResourcesServerServer()
}

func RegisterProjectsResourcesServerServer(s grpc.ServiceRegistrar, srv ProjectsResourcesServerServer) {
	s.RegisterService(&ProjectsResourcesServer_ServiceDesc, srv)
}

func _ProjectsResourcesServer_ExportSBOMProjectsResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportSBOMProjectsResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsResourcesServerServer).ExportSBOMProjectsResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.containeranalysis.v1.ProjectsResourcesServer/ExportSBOMProjectsResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsResourcesServerServer).ExportSBOMProjectsResource(ctx, req.(*ExportSBOMProjectsResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsResourcesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsResourcesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsResourcesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.containeranalysis.v1.ProjectsResourcesServer",
	HandlerType: (*ProjectsResourcesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExportSBOMProjectsResource",
			Handler:    _ProjectsResourcesServer_ExportSBOMProjectsResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/devtools/containeranalysis/v1/containeranalysis.proto",
}
